{"version":3,"file":"flatout.min.js","sources":["../src/core/util.js","../src/core/core.js","../src/core/http.js","../src/model/item.js","../src/model/binder.js","../src/view/view.js","../src/view/page.js","../src/app/router.js","../src/app/app.js","../src/view/list-view.js","../src/view/form-view.js"],"sourcesContent":["'use strict'\n\n/** @private */\nexport function eachEntry(obj, cb) {\n  Object.entries(obj).forEach(cb)\n}\n\nfunction* idCounter() {\n  let i = 0\n  while (true) yield i++\n}\n\nconst lfidCounter = idCounter()\n\n/** @private */\nexport function makeLFID() {\n  const v = lfidCounter.next().value\n  return `_F_${v}`\n}\n","'use strict'\n\nimport { eachEntry } from '../core/util.js'\n\n/**\n * Core\n */\nclass Core {\n  /**\n   * Create a Core.\n   */\n  constructor() {\n    const dp = {};\n    eachEntry(this._privates(), ([key, value]) => {\n      dp[key] = { value }\n    })\n    Object.defineProperties(this, dp)\n  }\n\n  /**\n   * Return non-enumerable attribute definitions.\n   *\n   * @access private\n   */\n  _privates() {\n    return { _F_obs: new Map() }\n  }\n\n  /**\n   * Add handler or listener for saying message\n   *\n   * @param {string|Object} nameOrObj - message name, '*' specify any listener.\n   * @param {Function} handler - handler called on message received or listener.\n   * @example\n   * core.listened('*', function(){});\n   * core.listened('evtName1', function(){});\n   * core.listened({ evtName2: function(){}, evtName3: function(){} })\n   */\n  listened(nameOrObj, handler) {\n    if (handler) {\n      this._listened(nameOrObj, handler);\n    } else {\n      eachEntry(nameOrObj, ([name, handler]) => this._listened(name, handler));\n    }\n  }\n\n  /**\n   * Remove handler or listener\n   *\n   * @param {string} name - message name, '*' specify any listener.\n   * @param {Function|object} handler - handler registered or listener registered.\n   */\n  unlistened(name, handler) {\n    const set = this._F_obs.get(name);\n    if (set) set.delete(handler);\n  }\n\n  /**\n   * Unescape HTML\n   * @param  {String} escaped HTML string\n   * @return {String}         raw HTML string\n   */\n  unescapeHtml(escaped) {\n    const doc = new DOMParser().parseFromString(escaped, \"text/html\");\n    return doc.documentElement.textContent;\n  }\n\n  /**\n   * Cast a message to the listeners\n   *\n   * @param {string} name - message name\n   * @param {*} ctx - passing value\n   */\n  say(name, ctx) {\n    this._say(name, name, ctx);\n    this._say('*', name, ctx);\n  }\n\n  // protected scope\n\n  _listened(name, handler) {\n    const set = this._F_obs.get(name);\n    if (set) {\n      set.add(handler);\n    } else {\n      this._F_obs.set(name, new Set([handler]));\n    }\n  }\n\n  _say(targetName, name, ctx) {\n    const handlers = this._F_obs.get(targetName);\n    if (handlers === undefined) return;\n\n    handlers.forEach(it => {\n      if (this._isFn(it)) {\n        it.call(this, ctx);\n        return;\n      }\n\n      let method = it[name];\n      if (this._isFn(method)) {\n        method.call(it, ctx);\n      }\n    });\n  }\n\n  _callR(args, target, method, methodOwner) {\n    let t = methodOwner ? this[methodOwner] : this;\n    if (t) t = t[method];\n    if (t) t.apply(this, args);\n\n    const children = this[target];\n    if (!children) return;\n\n    for (let name in children){\n      const c = children[name];\n      if (c._callR) c._callR(args, target, method, methodOwner);\n    }\n  }\n\n  _isStr(v) {\n    return (typeof v === 'string')\n  }\n\n  _isFn(f) {\n    return (typeof f === 'function')\n  }\n}\n\nexport default Core\n","'use strict'\n\n/**\n * Http Error\n */\nexport class HttpError {\n\n  /**\n   * @contructor\n   * @param req  request\n   * @param resOrErr response or Error\n   */\n  constructor(req, resOrErr) {\n    this.req = req;\n\n    if (typeof resOrErr === 'string') {\n      this.res = null;\n\n      this.isTimeout = (resOrErr === 'timeout');\n      this.isAborted = (resOrErr === 'abort');\n      this.isNetworkError = (resOrErr === 'error');\n    } else {\n      this.res = resOrErr;\n\n      let code = this.res.status;\n      this.isBadRequest   = (code === 400);\n      this.isUnauthorized = (code === 401);\n      this.isForbidden    = (code === 403);\n      this.isNotFound     = (code === 404);\n      this.isConflict     = (code === 409);\n      this.isServerError  = (code >= 500);\n    }\n  }\n}\n\n/**\n * HTTP Client\n *\n * @class HttpClient\n */\nexport class HttpClient {\n\n  /**\n   * Constructor.\n   * @param {object} [opts] - options\n   * @param {string} [opts.baseURL] - base URL (default empty).\n   * @param {object} [opts.headers] - custom headers\n   * @param {Promise} [opts.beforeRequest] - async function called before the request\n   * @param {Promise} [opts.beforeError] - async function called before throw an error. if return false, stop throwing the error\n   */\n  constructor(opts = {}) {\n    this.baseURL = opts.baseURL || '';\n    this.headers = opts.headers || {};\n    this.beforeRequest = opts.beforeRequest || (async () => {});\n    this.beforeError = opts.beforeError || (async () => true);\n\n    const bodyType = opts.bodyType || '';\n    if (bodyType.includes('form')) {\n      this.contentType = 'application/x-www-form-urlencoded';\n    } else {\n      this.contentType = 'application/json;charset=UTF-8';\n    }\n  }\n\n  /**\n   * do GET request.\n   * \n   * @param  {String} path - request path\n   * @param  {object} [ctx] - context\n   * @param  {object} [ctx.query] - request query data\n   * @param  {object} [ctx.body] - request body\n   * @param  {object} [ctx.headers] - header name and value object\n   * @return {Promise} Promise resolves response bodystatus: xhr.status,\n   * @type {number} status - status code\n   * @type {object} headers - response header name and value object\n   * @type {*} body - response body\n   */\n  get(path, ctx = {}) {\n    const { query, body, headers } = ctx;\n    return this.exec('GET', path, query, body, headers);\n  }\n\n  /**\n   * do POST request.\n   * \n   * @param  {String} path - request path\n   * @param  {object} [ctx] - context\n   * @param  {object} [ctx.query] - request query data\n   * @param  {object} [ctx.body] - request body\n   * @param  {object} [ctx.headers] - header name and value object\n   * @return {Promise} Promise resolves response bodystatus: xhr.status,\n   * @type {number} status - status code\n   * @type {object} headers - response header name and value object\n   * @type {*} body - response body\n   */\n  post(path, ctx = {}) {\n    const { query, body, headers } = ctx;\n    return this.exec('POST', path, query, body, headers);\n  }\n\n  /**\n   * do PUT request.\n   * \n   * @param  {String} path - request path\n   * @param  {object} [ctx] - context\n   * @param  {object} [ctx.query] - request query data\n   * @param  {object} [ctx.body] - request body\n   * @param  {object} [ctx.headers] - header name and value object\n   * @return {Promise} Promise resolves response bodystatus: xhr.status,\n   * @type {number} status - status code\n   * @type {object} headers - response header name and value object\n   * @type {*} body - response body\n   */\n  put(path, ctx = {}) {\n    const { query, body, headers } = ctx;\n    return this.exec('PUT', path, query, body, headers);\n  }\n\n  /**\n   * do PATCH request.\n   * \n   * @param  {String} path - request path\n   * @param  {object} [ctx] - context\n   * @param  {object} [ctx.query] - request query data\n   * @param  {object} [ctx.body] - request body\n   * @param  {object} [ctx.headers] - header name and value object\n   * @return {Promise} Promise resolves response bodystatus: xhr.status,\n   * @type {number} status - status code\n   * @type {object} headers - response header name and value object\n   * @type {*} body - response body\n   */\n  patch(path, ctx = {}) {\n    const { query, body, headers } = ctx;\n    return this.exec('PATCH', path, query, body, headers);\n  }\n\n  /**\n   * do DELETE request.\n   * \n   * @param  {String} path - request path\n   * @param  {object} [ctx] - context\n   * @param  {object} [ctx.query] - request query data\n   * @param  {object} [ctx.body] - request body\n   * @param  {object} [ctx.headers] - header name and value object\n   * @return {Promise} Promise resolves response bodystatus: xhr.status,\n   * @type {number} status - status code\n   * @type {object} headers - response header name and value object\n   * @type {*} body - response body\n   */\n  delete(path, ctx = {}) {\n    const { query, body, headers } = ctx;\n    return this.exec('DELETE', path, query, body, headers);\n  }\n\n  /**\n   * execute http request.\n   * \n   * @param  {string} method - method\n   * @param  {string} path - request path\n   * @param  {object} query - request query data\n   * @param  {string|object} body - request body\n   * @param  {object} headers - header name and value object\n   * @return {Promise} Promise\n   * @type {number} status - status code\n   * @type {object} headers - response header name and value object\n   * @type {*} body - response body\n   */\n  async exec(method, path, query, body, headers = {}) {\n    headers = Object.assign({}, this.headers, headers)\n\n    if (!('Content-Type' in headers)) {\n      headers['Content-Type'] = this.contentType;\n    }\n\n    await this.beforeRequest(path, { query, body, headers })\n\n    const req = { method, path, headers };\n    let httpErr;\n    try {\n      const res = await this._request(method, path, { query, body, headers });\n      const { status } = res;\n      if (status < 400) {\n        return res;\n      }\n\n      httpErr = new HttpError(req, res);\n    } catch(errType) {\n      httpErr = new HttpError(req, errType);\n    }\n\n    if (await this.beforeError(httpErr) !== false) {\n      throw httpErr;\n    }\n  }\n\n  _request(method, path, { query, body, headers }) {\n    let reqBody;\n    if (body) {\n      const cttType = headers['Content-Type'];\n      if (cttType.match(/\\/form-data/)) {\n        reqBody = new FormData();\n        for (let field in body) {\n          reqBody.append(field, body[field]);\n        }\n        delete headers['Content-Type']; // FormData set it with boundary\n      } else if (cttType.match(/\\/json/)) {\n        reqBody = JSON.stringify(body);\n      } else {\n        reqBody = this._formatParams(body);\n      }\n    } else {\n      reqBody = undefined;\n    }\n\n    let url = path;\n    if (this.baseURL && !url.match(/^[a-z]{2,5}:\\/\\//)) {\n      url = this.baseURL + url;\n    }\n    if (query) url += '?' + this._formatParams(query);\n\n    return new Promise((resolve, reject) => {\n        let xhr = new XMLHttpRequest();\n        xhr.open(method, url, true);\n\n        for (let name in headers) {\n          xhr.setRequestHeader(name, headers[name]);\n        }\n\n        xhr.onload = (evt) => {\n          let resBody, resCttType = xhr.getResponseHeader('Content-Type');\n          if (resCttType === null) {\n            resBody = null;\n          } else if (resCttType.match(/\\/json/)) {\n            resBody = JSON.parse(xhr.response);\n          } else if (resCttType.match(/\\/form/)) {\n            resBody = this._fromFormData(xhr.response);\n          } else {\n            resBody = xhr.response;\n          }\n\n          resolve({\n            status: xhr.status,\n            headers: xhr.getAllResponseHeaders(),\n            body: resBody\n          });\n        }\n\n        xhr.onabort = function(err){ reject('abort') };\n        xhr.onerror = function(err){ reject('error') };\n        xhr.ontimeout = function(err){ reject('timeout') };\n\n        xhr.send(reqBody);\n      });\n  }\n\n  _formatParams(params) {\n    return new URLSearchParams(params).toString()\n  }\n\n  _fromFormData(body) {\n    const data = {};\n    body.split('&').forEach(item => {\n      const [key, val] = item.split('=');\n      data[decodeURIComponent(key)] = decodeURIComponent(val);\n    });\n    return data;\n  }\n}\n","'use strict';\n\nimport { eachEntry } from '../core/util.js'\nimport Core from '../core/core.js';\n\n/**\n * Item.\n * this can be an element of List.\n * \n * @memberOf flatout\n */\nexport class Item extends Core {\n\n  /**\n   * Constructor.\n   * \n   * @param {object} [defaultData] - default data\n   */\n  constructor(defaultData = {}) {\n    super();\n    Object.assign(this, defaultData);\n  }\n\n  /**\n   * Add value to field-value.\n   * \n   * @param {string} field - adding field name\n   * @param {Any} value - adding value\n   */\n  add(field, value) {\n    const cur = this[field];\n    const isArr = cur !== undefined && cur instanceof Array;\n    let newVal;\n    if (isArr) {\n      cur.push(value);\n      newVal = cur;\n    } else {\n      newVal = cur + value;\n    }\n    this._updateField(field, newVal);\n  }\n\n  /**\n   * Toggle boolean field-value\n   * \n   * @param {string} field - toggling field name\n   */\n  toggle(field) {\n    const cur = Boolean(this[field]);\n    this._updateField(field, !cur);\n  }\n\n  /**\n   * Update the pairs of field-value.\n   * \n   * @param {Object} pairs - updating target pairs\n   */\n  update(pairs) {\n    eachEntry(pairs, ([key, val]) => this._updateField(key, val))\n  }\n\n  /**\n   * Destroy me.\n   */\n  destroy() {\n    this.say('destroy', {});\n  }\n\n  /**\n   * Update field with value.\n   * \n   * @param {string} field - updating target\n   * @param {Any} value    - new value\n   */\n  _updateField(field, value) {\n    const cur = this[field];\n\n    if (cur instanceof Item) {\n      if (cur instanceof List) {\n        cur.reset(value)\n      } else {\n        cur.update(value)\n      }\n    } else {\n      this[field] = value;\n      this.say('update', { field, newValue: value, oldValue: cur });\n    }\n  }\n}\n\n/**\n * List for plain object or Item.\n *\n * @memberOf flatout\n */\nexport class List extends Item {\n\n  /**\n   * Constructor.\n   * \n   * @param {Array} [defaultData] - default data array\n   * @param {object} [opts] - options\n   * @param {boolean|Class<Item>} [opts.wrapItem] - Whether wrapping Item or not, or the sub class of Item.\n   */\n  constructor(defaultData = [], opts = {}) {\n    super();\n\n    if (opts.wrapItem) {\n      if (opts.wrapItem === true) {\n        this._F_itemClass = Item;\n      } else {\n        this._F_itemClass = opts.wrapItem;\n      }\n    } else {\n      this._F_itemClass = null;\n    }\n\n    this._data = defaultData.map(item => this._wrapItem(item));\n  }\n\n  /**\n   * If you dynamically change wrapping item class according to the item, override this method.\n   *\n   * @param {object} item - an item\n   * @return {Class<View>}\n   */\n  itemClass(item) {\n    return this._F_itemClass\n  }\n\n  /**\n   * Return an item at position.\n   * \n   * @param  {number} index - item position.\n   * @return {*} item specified by index.\n   */\n  get(index) {\n    return this._data[index];\n  }\n\n  /**\n   * Add an item.\n   * \n   * @param {Any} item - item\n   * @param {number} [insertIndex] - optional insert position, add last if not defined\n   */\n  add(item, insertIndex) {\n    item = this._wrapItem(item);\n    if (insertIndex === undefined) {\n      this._data.push(item);\n    } else {\n      this._data.splice(insertIndex, 0, item);\n    }\n    this.say('add', { item, index: insertIndex });\n  }\n\n  /**\n   * Update an item at index.\n   * \n   * @param {Any} item - item\n   * @param {number} index - target index\n   */\n  update(item, index) {\n    if (index === undefined) {\n      // for when item updated\n      index = this._data.indexOf(item);\n    }\n    const cur = this._data[index];\n    if (cur !== item) {\n      item = this._wrapItem(item);\n      this._data[index] = item;\n    }\n    this.say('update', { item, index });\n  }\n\n  /**\n   * Remove an item (specified by index).\n   * \n   * @param {object|number} itemOrIndex - target item or the position.\n   */\n  remove(itemOrIndex) {\n    let index;\n    if (typeof itemOrIndex !== 'number') {\n      index = this._data.indexOf(itemOrIndex) // find item\n    } else {\n      index = itemOrIndex;\n    }\n    const item = this._data.splice(index, 1)[0];\n    this.say('remove', { item, index });\n  }\n\n  /**\n   * Add items.\n   * \n   * @param {Array} items - adding items\n   * @param {number} [insertIndex] - insert position\n   */\n  addAll(items, insertIndex) {\n    items.forEach(item => this.add(item, insertIndex))\n  }\n\n  /**\n   * Remove all items.\n   * \n   * @param {Object} opts - if opts.reverse is true, removing from last to first.\n   */\n  removeAll(opts = {}) {\n    const { reverse = false } = opts;\n    if (reverse) {\n      for (let idx = this.length - 1; idx >= 0; idx--) {\n        this.remove(idx);\n      }\n    } else {\n      while(this._data.length) {\n        this.remove(0);\n      }\n    }\n  }\n\n  /**\n   * Remove last item.\n   */\n  removeLast() {\n    this.remove(this.length - 1);\n  }\n\n  /**\n   * replace all items\n   *\n   * @param {Array} [newValues] - new values or default empty array\n   */\n  reset(newValues = []) {\n    this.removeAll();\n    this.addAll(newValues);\n  }\n\n  /**\n   * Iterates each item of self, return an index of the first item predicate returns true.\n   * \n   * @param  {string|Function} predictOrField - predicate function or target field\n   * @param  {*} [value] - finding value for target field\n   * @return {object} matched first item or undefined\n   */\n  find(predictOrField, value) {\n    const i = this.indexOf(predictOrField, value);\n    return i >= 0 ? this._data[i] : undefined;\n  }\n\n  /**\n   * Iterates each item of self, return the first item predicate returns true.\n   * \n   * @param  {string|Function|Object} predictOrField - predicate function or target field, target object\n   * @param  {*} [value] - finding value for target field\n   * @return {number} matched first item index or -1 if not found\n   */\n  indexOf(predictOrField, value) {\n    let judge;\n    if (value !== undefined) {\n      judge = it => it[predictOrField] === value\n    } else if (this._isFn(predictOrField)) {\n      judge = predictOrField;\n    } else {\n      return this._data.indexOf(predictOrField)\n    }\n\n    for (let i = 0, len = this._data.length; i < len; i++) {\n      if (judge(this._data[i])) return i;\n    }\n    return -1;\n  }\n\n  /*\n   * forEach method for data\n   * @param {Function} cb - callback.\n   */\n  forEach(cb) {\n    this._data.forEach(cb)\n  }\n\n  /*\n   * some method for data\n   * @param {Function} cb - callback returns true or false.\n   */\n  some(cb) {\n    return this._data.some(cb)\n  }\n\n  /*\n   * Data size\n   * @type {number}\n   */\n  get length() {\n    return this._data.length\n  }\n\n  /*\n   * @return {Iterator} data iterator\n   */\n  [Symbol.iterator]() {\n    return this._data[Symbol.iterator]()\n  }\n\n  /**\n   * Wrap an item by Item class\n   */\n  _wrapItem(item) {\n    if (!(item instanceof Item)) {\n      const cls = this.itemClass(item);\n      if (cls) {\n        return new cls(item);\n      }\n    }\n    return item;\n  }\n}\n","'use strict'\n\n/**\n * Binding DataModel and View\n * @access private\n */\nclass Binder {\n  /**\n   * Constructor.\n   * \n   * @param {Item} item - target item\n   */\n  constructor(item) {\n    this._item = item;\n    item.listened('*', this);\n  }\n\n  /**\n   * Remove listening to item\n   */\n  destroy() {\n    this._item.unlistened('*', this);\n    this._item = null;\n  }\n}\n\n/**\n * Binding Item and View\n * to apply the change of item to View\n * @access protected\n */\nexport class ItemBinder extends Binder {\n  /**\n   * Constructor.\n   * \n   * @param {Item} item - target data\n   * @param {View} view - target view\n   */\n  constructor(item, view) {\n    super(item)\n    this._view = view;\n  }\n\n  /**\n   * Updating field of view\n   */\n  update({ field, newValue, oldValue }) {\n    this._view.update(field, newValue, oldValue);\n  }\n}\n\n/**\n * Binding List and ListView\n * to apply the change of colleciton to ListView and its child Views\n * @access protected\n */\nexport class ListBinder extends Binder {\n  /**\n   * Constructor.\n   * \n   * @param {List} list - target data\n   * @param {ListView} listView - target view\n   */\n  constructor(list, listView) {\n    super(list)\n    this._view = listView;\n  }\n\n  /**\n   * Adding item to ListView at index.\n   */\n  add({ item, index }) {\n    if (index === undefined) {\n      this._view.addItem(item);\n    } else {\n      this._view.insertItem(item, index);\n    }    \n  }\n\n  /**\n   * Updating item of ListView at index.\n   */\n  update({ item, index }) {\n    this._view.updateItem(item, index);\n  }\n\n  /**\n   * Removing item from ListView.\n   */\n  remove({ item, index }) {\n    this._view.removeItem(item, index);\n  }\n}\n","'use strict'\n\nimport Core from '../core/core.js'\nimport { eachEntry } from '../core/util.js'\nimport { Item } from '../model/item.js'\nimport { ItemBinder } from '../model/binder.js'\n\nconst HOOK_EVTS = ['click', 'submit', 'change'];\n\n/**\n* View\n*/\nclass View extends Core {\n\n  /**\n   * Create a View.\n   *\n   * @param {object} [props] - Properties\n   * @param {string|Element} [props.rootEl] - root element ID or root node\n   * @param {Class<View>} [props.parent] - parent view this belongs to\n   * @param {string|Element} [props.contentEl] - parent element of child views (specified by data-id or id value).\n   */\n  constructor(props = {}) {\n    super();\n\n    /**\n     * Root element\n     * @member {Node}\n     */\n    this.el = null;\n\n    /**\n     * Subview children of the view\n     * @member {object}\n     */\n    this.views = {};\n\n    const { rootEl, ...props_ } = props;\n    this._build(rootEl, props_);\n  }\n\n  /** @override */\n  _privates() {\n    return Object.assign(super._privates(), {\n      _F_onevts: new Set(),\n      _F_binders: [],\n      _F_elcache: new Map(),\n      _F_emap: { _: {} },\n    })\n  }\n\n  /**\n   * Initialize props\n   * \n   * @param {object} defaults - default data.\n   * @return {object|Item} modified data or item.\n   */\n  init(defaults) {\n  }\n\n  /**\n   * For implement creating subviews and setting listener of events.\n   * \n   * @param {object} views - added subview target (ex. views.list = new ListView(..))\n   */\n  load(views) {\n  }\n\n  /**\n   * Ssetting listener of events.\n   * \n   * @param {object} evts - added listener target (ex. evts.subview_event)\n   */\n  handle(evts) {\n  }\n\n  /**\n   * For implement after loading completed\n   */\n  completed() {\n  }\n\n  /**\n   * For implement unloading subviews\n   */\n  unload() {\n  }\n\n  /**\n   * Cast a message to all children of view\n   *\n   * @param {string} method - method name\n   * @param {Array} args - arguments\n   */\n  broadcast(method, args = []) {\n    this._callR(args, 'views', method)\n  }\n\n  /**\n   * _loaded resolve after all done\n   */\n  _build(root, props) {\n    console.log('View#_build', root, props);\n\n    const defaults = this._setupProps(props);\n    const data = this.init(defaults);\n    this._data = data !== undefined ? data : defaults;\n    this._setRootNode(root, props.parent || null, this._data);\n    if (this.el) this._loadFinish();\n  }\n\n  _setupProps(props) {\n    let defaults;\n    if (props) {\n      // once detach data\n      defaults = props.data;\n      if ('data' in props) delete props.data;\n      Object.assign(this, props);\n    }\n    return defaults;\n  }\n\n  /**\n   * Set root node element to this.el\n   */\n  _setRootNode(root, parent, data) {\n    if (this._isStr(root)) {\n      root = parent ? parent.findEl(root) : document.getElementById(root);\n      if (!root) {\n        throw new Error(`Failed to create View because element not found ID: ${root}`);\n      }\n    }\n\n    if (this.html) {\n      this.el = this._buildFromHtml(data);\n      if (parent) {\n        // If this view doesn't belong to parent views\n        parent.appendEl(this.el);\n      } else if (root) {\n        root.parentNode.replaceChild(this.el, root);\n      }\n    } else if (root) {\n      this.el = root;\n    }\n  }\n\n  _loadFinish() {\n    const ctn = this.contentEl;\n    this.contentEl = this._isStr(ctn) ? this.findEl(ctn) : this.el;\n\n    this._loadViewsEvts();\n    this._setDataToUI();\n    this._bindData();\n\n    this.completed();\n  }\n\n  _loadViewsEvts() {\n    console.log('View#_loadViewsEvts', this);\n\n    this.load(this.views);\n\n    eachEntry(this.views, ([name, view]) => {\n      if (!view.el) {\n        view.el = this.findEl(name);\n        view._loadFinish();\n      } else if (view.el.parentNode instanceof DocumentFragment) {\n        const makerEl = this.findEl(name);\n        if (makerEl) {\n          // Embed view at marker if the node exists\n          makerEl.parentNode.replaceChild(view.el, makerEl);\n        } else {\n          this.appendEl(view.el);\n        }\n      }\n    });\n\n    const evts = {}, emap = this._F_emap;\n    this.handle(evts);\n    this._parseEvts(evts, emap);\n\n    // attach events to current views\n    eachEntry(emap, ([target, hmap]) => {\n      if (target === '_') {\n        this._setEvts(this.el, hmap);\n        return;\n      }\n\n      const el = this.findEl(target);\n      if (!el) return;\n\n      this._setEvts(el, hmap)\n    })\n  }\n\n  _bindData() {\n    const data = this._data;\n    if (data instanceof Item) {\n      this._F_binders.push(new ItemBinder(data, this));\n    }\n  }\n\n  _unbindData() {\n    const binder = this._F_binders.pop();\n    if (binder) binder.destroy();\n  }\n\n  /**\n   * data to elements text or value, innerHTML of elements\n   *\n   * @property {object} data\n   * @example\n   * view.data = { name: 'Mike', inputAge: { value: 24 }, message: { html: \"<p>Hello!</p>\" } };\n   */\n  get data() {\n    return this._data\n  }\n\n  set data(value) {\n    console.log('View#data=', this);\n    this._data = value;\n    this._unbindData();\n    this._setDataToUI();\n    this._bindData();\n  }\n\n  /**\n   * Find an element that has specified data-id else call getElementById\n   *\n   * @param id data-id value\n   * @return {Element}\n   * @example\n   * view.findEl('elementDataId');\n   */\n  findEl(id) {\n    const cached = this._F_elcache.get(id);\n    if (cached && cached.parentNode) {\n      return cached;\n    }\n    const result = this.el.querySelector(`[data-id=\"${id}\"]`) || document.getElementById(id);\n    this._F_elcache.set(id, result);\n    return result;\n  }\n\n  /**\n   * Append child element\n   *\n   * @param {Element} el - child element\n   */\n  appendEl(el) {\n    this.contentEl.appendChild(el)\n  }\n\n  /**\n   * Set child view as name after load\n   *\n   * @param {string} name - view name\n   * @param {View} view - child view. remove if null\n   * @example\n   * parent.set('name', view);\n   */\n  set(name, view) {\n    const t = this, curvw = t.views[name];\n    if (curvw) {\n      curvw.destroy();\n      curvw.el.remove();\n      delete t.views[name];\n    }\n    if (view) {\n      t.views[name] = view;\n      t.appendEl(view.el);\n      t._setEvts(view.el, t._F_emap[name] || {})\n    }\n  }\n\n  /**\n   * Fire event\n   *\n   * @param {string} name - event name\n   * @param {object} ctx - event context\n   * @example\n   * view.fire('move', { newPosition: 1 });\n   */\n  fire(name, ctx) {\n    const e = ctx ? new CustomEvent(name, { detail: ctx, bubbles: true })\n                : new Event(name, { bubbles: true });\n    this.el.dispatchEvent(e);\n  }\n\n  /**\n   * Destroy all chidren, unload, and destroy binder, teardown events\n   */\n  destroy() {\n    this.unload();\n\n    Object.values(this.views).forEach(it => it.destroy());\n    this.views = {};\n    this._F_elcache.clear();\n    this._unbindData();\n    this._teardownEvts();\n    this.parent = null;\n  }\n\n  /**\n   * Called when the binding data is updated.\n   * \n   * @param {string} name field name\n   * @param {*} newValue new data value\n   * @param {*} oldValue old data value\n   * @return {boolean} true if setting field value succeeded\n   */\n  update(name, newValue, oldValue) {\n    return this._setFieldValue(name, newValue)\n  }\n\n  /**\n   * Set data to subviews or elements in the view.\n   */\n  _setDataToUI() {\n    const data = this._data;\n    if (data === undefined) return;\n    console.log('View#_setDataToUI', this);\n\n    if (data instanceof Object) {\n      eachEntry(data, ([name, val]) => this._setFieldValue(name, val))\n    } else {\n      this._setVal(this.el, data)\n    }\n  }\n\n  _setFieldValue(name, val) {\n    const it = this.views[name];\n    if (it) {\n      it.data = val;\n      return true;\n    }\n\n    const el = this.findEl(name);\n    if (!el) return false;\n\n    this._setVal(el, val)\n    return true;\n  }\n\n  // private\n\n  _setVal(el, val) {\n    if (el.dataset && el.dataset.type === 'html') {\n      el.innerHTML = val;\n    } else if ('value' in el) {\n      el.value = val;\n    } else {\n      el.textContent = val;\n    }\n  }\n\n  _parseEvts(evts, emap) {\n    eachEntry(evts, ([name, handler]) => {\n      const pos = name.lastIndexOf('_');\n      if (pos === -1) {\n        emap._[name] = handler;\n        return;\n      }\n\n      // ex) button_click\n      const target = name.substr(0, pos),\n            ename = name.substr(pos + 1),\n            hmap = emap[target];\n      if (hmap) {\n        hmap[ename] = handler;\n      } else {\n        emap[target] = { [ename]: handler };\n      }\n    })\n  }\n\n  /**\n   * Bind targets with event handler set.\n   *\n   * @param {Element} el - event raiser.\n   * @param {object} hmap - handler map. Object<type, value>\n   */\n  _setEvts(el, hmap) {\n    const ts = el instanceof NodeList ? Array.from(el) : [el];\n    eachEntry(hmap, ([type, handler]) => {\n      ts.forEach(it => this._trapEvt(this, it, type, handler))\n    })\n  }\n\n  /**\n   * Bind target event with handler.\n   *\n   * @param {View} root - caller\n   * @param {Element} el - event raiser\n   * @param {string} type - event type\n   * @param {function} handler - callback function\n   */\n  _trapEvt(root, el, type, handler) {\n    const hook = function(e) {\n      let rb;\n      try {\n        rb = handler.call(root, this, e)\n      } catch(err) {\n        console.error(err)\n      }\n      return rb !== undefined ? rb : false\n    };\n\n    if (HOOK_EVTS.includes(type)) {\n      el['on'+type] = hook;\n    } else {\n      el.addEventListener(type, hook);\n    }\n    this._F_onevts.add([el, type, hook]);\n  }\n\n  _teardownEvts() {\n    const onevts = this._F_onevts;\n    onevts.forEach(([el, type, hook]) => {\n      if (HOOK_EVTS.includes(type)) {\n        el['on'+type] = null;\n      } else {\n        el.removeEventListener(type, hook);\n      }\n    });\n    onevts.clear();\n  }\n\n  _buildFromHtml(data) {\n    const el = document.createElement('template');\n    el.innerHTML = this.html(data || {});\n    const df = document.adoptNode(el.content);\n    return this._firstEl(df);\n  }\n\n  _firstEl(el) {\n    const fec = el.firstElementChild;\n    if (fec !== undefined) return fec;\n\n    // for Safari, Edge\n    const nodes = el.childNodes;\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      const child = nodes[i];\n      if (child.nodeType === Node.ELEMENT_NODE) return child;\n    }\n    return null;\n  }\n}\n\nexport default View;\n","'use strict'\n\nimport View from './view.js'\n\n/**\n* Root view of page\n*\n* @example\n* class DetailPage extends Page {\n*   title() {\n*     return 'Detail Page'\n*   }\n*\n*   html(data) {\n*     return `\\\n*     <div>\n*       <h1>${data.headline}</h1>\n*     </div>\n*     `\n*   }\n* }\n*/\nexport default class Page extends View {\n  /**\n   * Return document title\n   */\n  title() {\n    return ''\n  }\n\n  /** @override */\n  destroy() {\n    super.destroy();\n    this.el.remove();\n  }\n}\n","'use strict'\n\nimport { eachEntry } from '../core/util.js'\nimport Page from '../view/page.js'\n\n/**** Design memo *********************************************\n\n* Open `http://FQDN/` and Enter in URL bar --> onload\n* Input appending `http://FQDN/#!/` and Enter in URL bar --> onhashchange\n* Open `http://FQDN/#!/xxxx` in URL bar --> onload\n* Reload --> onload\n* Click a link with href=`#!/xxxx` --> onhashchange\n* Run script `window.location.hash = '#!/xxx';` --> onhashchange\n* Back to `#!/xxxx' --> onhashchange\n* Forward to `#!/xxxx' --> onhashchange\n\n```\nconst routeMap = {\n  index: HomeView,                  // /\n  about: AboutView,                 // /about\n  books: {\n    index: BookListView,            // /books\n    ':bookId': {\n      index:   BookView,            // /books/:bookId\n      summary: BookSummaryView,     // /books/:bookId/summary\n      readers: {\n        index: '../',               // redirect to /books/:bookId\n        ':readerId': BookReaderView // /books/:bookId/readers/:readerId\n      }\n    }\n  },\n  docs: {\n    index: DocIndexView,            // /docs\n    api:   DocApiView,              // /docs/api\n  },\n  ':userId': {\n    index: UserView,                // /:userId\n    timeline: UserTimelineView      // /:userId/timeline\n  }\n}\n```\n\nbe converted to\n\n```\nconst _routeTree = {\n  index: HomeView,\n  about: AboutView,\n  books: {\n    index: BookListView,\n    _any_: {\n      id: 'bookId',\n      children: {\n        index: BookView,\n        summary: BookSummaryView,\n        readers: {\n          index: '../',\n          _any_: {\n            view: BookReaderView,\n            id:   'readerId'\n          }\n        }\n      }\n    }\n  },\n  docs: {\n    index: DocIndexView,\n    api: DocApiView\n  },\n  _any_: {\n    id: 'userId',\n    children: {\n      index: UserView,\n      timeline: UserTimelineView\n    }\n  }\n}\n```\n***********************************************************/\n\n/**\n * Router\n *\n * This subclass must override depart() and go(path)\n *\n * @access private\n * @example\n * const routeMap = {\n *   index: HomeView,                  // /\n *   about: AboutView,                 // /about\n *   books: {\n *     index: BookListView,            // /books/\n *     ':bookId': {\n *       index: BookDetailView,        // /books/:bookId\n *       summary: BookSummaryView,     // /books/:bookId/summary\n *       readers: {\n *         index: '../',   // redirect to /books/:bookId\n *         ':readerId': BookReaderView // /books/:bookId/readers/:readerId\n *       }\n *     },\n *     pages: {\n *       index: PagesView,             // /pages/\n *       faq: FaqView,                 // /pages/faq\n *       policy: PolicyView            // /pages/policy\n *     }\n * };\n *\n * const router = new Router(routeMap);\n */\nclass Router {\n  constructor(routeMap, onMove) {\n    this._routeTree = this._parseRoute(routeMap);\n    this._lastRoute = null;\n    this.onMove = onMove;\n  }\n\n  /**\n   * Need call `depart` after first page loaded\n   *\n  depart() {\n  } */\n\n  canGo(path) {\n    return this.getRoute(path) !== null;\n  }\n\n  /**\n   * Need call `go` when History mode and anchor tag clicked\n   * or moving the other page by a script\n   *\n   * @param  {String} path path\n  go(path) {\n  } */\n\n  move(path) {\n    this.onMove(this.getRoute(path));\n  }\n\n  /**\n   * @return {Object} layer\n   * @property {Page} view - page view.\n   * @property {Object} ctx - context (path ids).\n   */\n  getRoute(absPath) {\n    if (!absPath.startsWith('/')) absPath = '/'+absPath;\n\n    let pt = absPath;\n    if (pt === '/') pt += 'index';\n    pt = this._chopEndSlash(pt);\n    if (pt.endsWith('.html')) pt = pt.substr(0, pt.length - 5);\n\n    const paths = this._parsePath(pt);\n    let tree = this._routeTree;\n\n    let idMap = {}, key, route = null;\n    while ((key = paths.shift()) !== undefined) {\n      let target;\n      if (key in tree) {\n        target = tree[key];\n      } else if ('_any_' in tree) {\n        idMap[tree._any_.id] = key;\n        tree = tree._any_.children;\n        if (paths.length > 0) continue;\n        target = tree.index;\n      } else {\n        alert(`${pt} page isn't defined`);\n        throw '/';\n      }\n\n      if (this._isStr(target)) {\n        const redirectPath = this._resolve(absPath, target);\n        window.history.replaceState(null, null, redirectPath);\n        return this.getRoute(redirectPath);\n      } else if (target.prototype instanceof Page) {\n        route = { view: target, ctx: idMap };\n      } else {\n        tree = target;        \n        if (paths.length === 0) paths.unshift('index');\n      }\n    }\n\n    if (route) return route;\n\n    alert(`${absPath} page not found`);\n    throw '/';\n  }\n\n  _parsePath(path) {\n    const paths = path.split('/');\n    paths.shift();\n    return paths;\n  }\n\n  _parseRoute(map) {\n    const tree = {};\n\n    eachEntry(map, ([key, item]) => {\n      const isViewOrStr = (item.prototype instanceof Page) || this._isStr(item);\n\n      if (key.startsWith(':')) {\n        const leaf = tree._any_ = { id: key.substr(1) }; // strip prefix :\n        leaf.children = isViewOrStr ? { index: item } : this._parseRoute(item);\n      } else {\n        tree[key] = isViewOrStr ? item : this._parseRoute(item);\n      }\n    });\n\n    return tree;\n  }\n\n  _resolve(src, dest) {\n    if (dest.startsWith('/')) return dest;\n\n    const parts = src.split('/');\n\n    let md;\n    while (md = dest.match(/^\\.\\.\\/?(.*)$/)) {\n      parts.pop();\n      dest = md[1];\n    }\n\n    return parts.join('/') + dest;\n  }\n\n  _chopEndSlash(pt) {\n    return pt.endsWith('/') ? pt.substr(0, pt.length - 1) : pt;\n  }\n\n  _isStr(v) {\n    return typeof v === 'string'\n  }\n}\n\n/**\n * @access private\n */\nexport class HistoryRouter extends Router {\n  constructor(routeMap, onMove, rootPath) {\n    super(routeMap, onMove);\n\n    let pt = rootPath;\n    if (!pt) {\n      let base = document.querySelector('base');\n      if (base) {\n        const { pathname } = new URL(base.href);\n        pt = this._chopEndSlash(pathname);\n      }\n    }\n    this.basePath = pt || '';\n  }\n\n  depart() {\n    document.addEventListener('click', e => {\n      this._captureClick(e);\n    }, true);\n\n    const doMove = pt => {\n      try {\n        this.move(pt);\n      } catch(e) {\n        if (this._isStr(e)) {\n          window.location.href = this.basePath + e;\n        } else {\n          console.error(e)\n        }          \n      }\n    }\n\n    window.onpopstate = e => {\n      doMove(e.state ? e.state.path : '/')\n    }\n\n    let path = window.location.pathname.substr(this.basePath.length);\n    if (path.length > 1 && path.endsWith('/')) {\n      // Force strip last with / from path\n      path = path.substr(0, path.length - 1);\n      window.history.replaceState(null, null, path);\n    }\n\n    doMove(path);\n  }\n\n  go(path) {\n    const h = window.history;\n    if (h && h.pushState) {\n      h.pushState({ path }, null, this.basePath + path);\n      this.move(path);\n    }\n  }\n\n  _captureClick(e) {\n    const nxt = document.activeElement;\n    if (!nxt || nxt.tagName !== 'A') return;\n    if (nxt.target === '_top') return;\n\n    if (nxt.href.startsWith(window.location.origin + this.basePath)) {\n      e.preventDefault();\n\n      try {\n        this.go(nxt.pathname.substr(this.basePath.length));\n      } catch(e) {\n        if (this._isStr(e)) {\n          this.go(e);\n        } else {\n          console.error(e)\n        }\n      }\n    }\n  }\n}\n\n/**\n * @access private\n */\nexport class HashRouter extends Router {\n  constructor(routeMap, onMove, pathHead = '#!') {\n    super(routeMap, onMove);\n    this.head = pathHead;\n  }\n\n  get curPath() {\n    return window.location.hash.substr(this.head.length)\n  }\n\n  depart() {\n    const doMove = pt => {\n      try {\n        this.move(pt);\n      } catch(e) {\n        if (this._isStr(e)) {\n          window.location.hash = this.head + e;\n        } else {\n          console.error(e)\n        }\n      }\n    }\n\n    window.onhashchange = e => {\n      doMove(this.curPath || '/')\n    }\n\n    doMove(this.curPath);\n  }\n\n  go(path) {\n    window.location.hash = this.head + path;\n  }\n}\n","'use strict'\n\nimport { HistoryRouter, HashRouter } from '../app/router.js'\n\n/**\n * Application.\n *\n * @memberOf flatout\n */\nclass App {\n  /* Do not call */\n  constructor() {}\n\n  /**\n   * Activate application\n   *\n   * @param  {Class<View>} rootViewClass - root view class.\n   * @param  {Object} routeMap - routing map.\n   * @param  {Object} [opts]          - options.\n   * @param  {Object} [opts.mode]     - HISTORY or HASH\n   * @param  {Object} [opts.rootPath] - history root path.\n   * @param  {Object} [opts.pathHead] - hash path prefix.\n   */\n  activate(rootViewClass, routeMap, opts = {}) {\n    /**\n     * Root area.\n     * @type {View}\n     */\n    this._rootArea = new rootViewClass();\n\n    /**\n     * Page area replaced if path changed.\n     * @type {Page}\n     */\n    this._curPage = null;\n\n    const onMove = layer => { this._onMove(layer) };\n    this._router = opts.mode === 'HISTORY'\n      ? new HistoryRouter(routeMap, onMove, opts.rootPath)\n      : new HashRouter(routeMap, onMove, opts.pathHead);\n\n    const loadCb = e => { this._router.depart() }\n    if (document.readyState !== 'loading') loadCb()\n    else document.addEventListener('DOMContentLoaded', loadCb, false)\n  }\n\n  /**\n   * Go a page.\n   *\n   * @param  {string} path - URL path\n   * @param  {Object} ctx  - context\n   * @return {boolean} always false.\n   */\n  go(path, ctx) {\n    this._preCtx = ctx;\n    this._router.go(path);\n    return false;\n  }\n\n  /**\n   * Back page.\n   *\n   * @return {boolean} - always false.\n   */\n  back() {\n    window.history.back();\n    return false;\n  }\n\n  _onMove({ view, ctx }) {\n    if (this._preCtx) {\n      // Merge ctx by go to layer.ctx that contains idMap\n      ctx = Object.assign(ctx || {}, this._preCtx);\n      this._preCtx = null;\n    }\n    this._replaceContent(view, ctx);\n    this._updateTitle();\n  }\n\n  /**\n   * Replace layer.\n   *\n   * @param {Class<Page>} view - new page class.\n   * @param {Object} ctx - passing context.\n   */\n  _replaceContent(view, ctx) {\n    const oldPage = this._curPage;\n    if (oldPage) {\n      oldPage.destroy();\n    }\n\n    const baseCtx = Object.assign({}, this._rootArea.context)\n    this._curPage = new view({\n      parent: this._rootArea,\n      context: Object.assign(baseCtx, ctx)\n    });\n  }\n\n  /**\n   * Update page title of browser\n   */\n  _updateTitle() {\n    let ttl = '';\n    if (this._curPage) {\n      ttl = this._curPage.title()\n    }\n    document.title = this._rootArea.title(ttl);\n  }\n}\n\nexport default new App();\n","'use strict'\n\nimport { makeLFID } from '../core/util.js'\nimport { List } from '../model/item.js'\nimport { ListBinder } from '../model/binder.js'\nimport View from './view.js'\n\n/**\n* View for the collection of items.\n*\n* @example\n* class ListItemView extends View {\n*   html(data) {\n*     return `<li>${data.title}</li>`;\n*   }\n* }\n* \n* let instanceView = new ListView(Node, ListItemView,\n*           {\n*             data: [\n*               { title: 'foo' },\n*               { ttile: 'bar' }\n*             ]\n*           });\n*/\nclass ListView extends View {\n\n  /*\n   * Create a ListView.\n   *\n   * @param {object} [props] - Properties\n   * @param {string|Element} [props.rootEl] - root element ID or root node\n   * @param {Class} [itemView] - item view class\n   * @param {Class<View>} [props.parent] - parent view this belongs to\n   * @param {string|Element} [props.contentEl] - parent element of child views (specified by data-id or id value).\n   */\n  constructor(itemView, props = {}) {\n    props._F_tmpl = itemView;\n    super(props);\n  }\n\n  /** @override */\n  _privates() {\n    const pa = super._privates();\n    pa._F_itemSet = new Map();\n    return pa;\n  }\n\n  /**\n   * If you dynamically change creating item view according to the item, override this method.\n   *\n   * @param {object} item - an item\n   * @return {Class<View>}\n   */\n  itemViewClass(item) {\n    return this._F_tmpl\n  }\n\n  /**\n   * Add an item to list\n   *\n   * @param {object} item - an item\n   */\n  addItem(item) {\n    const view = this._createViewByItem(item);\n    this.addItemEl(this.contentEl, view.el);\n    return view;\n  }\n\n  /**\n   * Insert an item to list at index\n   *\n   * @param {object} item - an item\n   * @param {number} index - target position\n   */\n  insertItem(item, index) {\n    const view = this._createViewByItem(item);\n    this.insertItemEl(this.contentEl, view.el, this._childElAt(index));\n    return view;\n  }\n\n  /**\n   * Update an item at index\n   *\n   * @param {object} item - an item\n   * @param {number} index - target position\n   */\n  updateItem(item, index) {\n    const LFID = this._childElAt(index).getAttribute('_lfid_');\n    this._F_itemSet.set(LFID, item);\n    this.views[LFID].data = item;\n  }\n\n  /**\n   * Remove item from list\n   *\n   * @param {object} item - an item\n   * @param {number} index - target position\n   */\n  removeItem(item, index) {\n    const el = this._childElAt(index)\n    this._removeItemByEl(el);\n  }\n\n  /**\n   * Remove item with view\n   *\n   * @param {view} view - an view of removing item\n   */\n  removeItemByView(view) {\n    this._removeItemByEl(view.el)\n  }\n\n  /**\n   * If you change adding item effect, override this method.\n   *\n   * @protected\n   * @param {Element} listEl parent element for List\n   * @param {Element} itemEl added element\n   */\n  addItemEl(listEl, itemEl) {\n    listEl.appendChild(itemEl)\n  }\n\n  /**\n   * If you change inserting item effect, override this method.\n   *\n   * @protected\n   * @param {Element} listEl - parent element for List\n   * @param {Element} newEl  - an element for new item for List\n   * @param {Element} nextEl - next element will be next one for newEl\n   */\n  insertItemEl(listEl, newEl, nextEl) {\n    listEl.insertBefore(newEl, nextEl)\n  }\n\n  /**\n   * If you change removing item effect, override this method.\n   *\n   * @protected\n   * @param {Element} listEl - parent element for List\n   * @param {Element} itemEl - removed element\n   */\n  removeItemEl(listEl, itemEl) {\n    listEl.removeChild(itemEl)\n  }\n\n  /**\n   * Return child element at position.\n   *\n   * @param {number} index - item position.\n   * @return {Element} target element\n   */\n  _childElAt(index) {\n    return this.contentEl.children[index];\n  }\n\n  _createViewByItem(item) {\n    const LFID = makeLFID();\n    const cls = this.itemViewClass(item);\n    const view = new cls({ data: item });\n    this._F_itemSet.set(LFID, view);\n    this.views[LFID] = view;\n    view.el.setAttribute('_lfid_', LFID);\n    return view;\n  }\n\n  /**\n   * Remove item from list by element\n   *\n   * @param {element} el - removed element\n   */\n  _removeItemByEl(el) {\n    const LFID = el.getAttribute('_lfid_');\n    this._F_itemSet.delete(LFID);\n    const vws = this.views\n    vws[LFID].unload();\n    delete vws[LFID];\n    this.removeItemEl(this.contentEl, el);\n  }\n\n  /** @override */\n  _bindData() {\n    const data = this._data;\n    if (data instanceof List) {\n      this._F_binders.push(new ListBinder(data, this))\n    }\n  }\n\n  /** @override */\n  _setDataToUI() {\n    if (this._data === undefined) return;\n    console.log('ListView#_setDataToUI', this);\n\n    for (let childView of Object.values(this.views)) {\n      this.removeItemByView(childView);\n    }\n\n    for (let item of this._data) {\n      this.addItem(item);\n    }\n  }\n}\n\nexport default ListView\n","'use strict'\n\nimport { eachEntry } from '../core/util.js'\nimport View from './view.js'\n\n/**\n* A FormView is data fields to bind input, select or textarea by theirs names.\n*\n* @example\n* // Create a FormView bound to loginForm\n* views.form = new FormView('loginForm');\n* \n* evts.form_submit = function(sender, e) {\n*   var body = this.data;\n*   http.post('/login', { body });\n* }\n* @example {@lang xml}\n* <form id=\"loginForm\">\n*   <input type=\"text\" name=\"email\">\n*   <input type=\"password\" name=\"password\">\n*   <button type=\"submit\">Sign in</button>\n* </form>\n*/\nclass FormView extends View {\n\n  /**\n   * @override\n   */\n  get data() {\n    return this._assignFromFields(this._data);\n  }\n\n  set data(value) {\n    super.data = value;\n  }\n\n  /**\n   * Get field value as the type.\n   *\n   * @param {string} field - target field\n   * @return {Any} the value\n   */\n  getValueOf(field) {\n    const el = this.findEl(field);\n    if (el) {\n      return this._valueAsType(el);\n    }\n\n    const vw = this.views[field];\n    if (vw) {\n      return vw.data;\n    }\n  }\n\n  /**\n   * also returns form element by name.\n   * @override\n   */\n  findEl(id) {\n    return this.el[id] || super.findEl(id);\n  }\n\n  _assignFromFields(data = {}) {\n    const result = Object.assign({}, data)\n\n    // FormData cooks radio buttons and no name inputs\n    for (let [name, _] of new FormData(this.el)) {\n      result[name] = this._valueAsType(this.el[name]);\n    }\n\n    eachEntry(this.views, ([name, view]) => {\n      result[name] = view.data;\n    });\n\n    return result;\n  }\n\n  _valueAsType(el) {\n    const ds = el.dataset || {};\n    const type = ds.type || 'text';\n    let val = el.value;\n    if (type.startsWith('date') || el.type === 'datetime-local') {\n      val = new Date(val)\n    } else if (type === 'number') {\n      val = Number(val)\n    } else if (type.startsWith('bool')) {\n      val = Boolean(val)\n    } \n    return val;\n  }\n\n  _setFieldValue(name, val) {\n    const input = this.el[name];\n    if (input) {\n      if (input.type === 'datetime-local') {\n        val = this.formatLocalDateTime(new Date(val))\n      }\n      input.value = val;\n      return;\n    }\n    super._setFieldValue(name, val);\n  }\n\n  formatLocalDateTime(date) {\n    return [date.getFullYear(), '-',\n      ('0' + (date.getMonth() + 1)).slice(-2), '-',\n      ('0' + date.getDate()).slice(-2), 'T',\n      ('0' + date.getHours()).slice(-2), ':',\n      ('0' + date.getMinutes()).slice(-2)\n    ].join('')\n  }\n}\n\nexport default FormView\n"],"names":["eachEntry","obj","cb","Object","entries","forEach","lfidCounter","i","idCounter","Core","[object Object]","dp","this","_privates","key","value","defineProperties","_F_obs","Map","nameOrObj","handler","_listened","name","set","get","delete","escaped","DOMParser","parseFromString","documentElement","textContent","ctx","_say","add","Set","targetName","handlers","undefined","it","_isFn","call","method","args","target","methodOwner","t","apply","children","c","_callR","v","f","HttpError","req","resOrErr","res","isTimeout","isAborted","isNetworkError","code","status","isBadRequest","isUnauthorized","isForbidden","isNotFound","isConflict","isServerError","HttpClient","opts","baseURL","headers","beforeRequest","beforeError","bodyType","includes","contentType","path","query","body","exec","assign","httpErr","_request","errType","reqBody","cttType","match","FormData","field","append","JSON","stringify","_formatParams","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","onload","evt","resBody","resCttType","getResponseHeader","parse","response","_fromFormData","getAllResponseHeaders","onabort","err","onerror","ontimeout","send","params","URLSearchParams","toString","data","split","item","val","decodeURIComponent","Item","defaultData","super","cur","newVal","Array","push","_updateField","Boolean","pairs","say","List","reset","update","newValue","oldValue","wrapItem","_F_itemClass","_data","map","_wrapItem","index","insertIndex","splice","indexOf","itemOrIndex","items","reverse","idx","length","remove","newValues","removeAll","addAll","predictOrField","judge","len","some","Symbol","iterator","cls","itemClass","Binder","_item","listened","unlistened","ItemBinder","view","_view","ListBinder","list","listView","addItem","insertItem","updateItem","removeItem","HOOK_EVTS","View","props","el","views","rootEl","props_","_build","_F_onevts","_F_binders","_F_elcache","_F_emap","_","defaults","evts","root","_setupProps","init","_setRootNode","parent","_loadFinish","_isStr","findEl","document","getElementById","Error","html","_buildFromHtml","appendEl","parentNode","replaceChild","ctn","contentEl","_loadViewsEvts","_setDataToUI","_bindData","completed","load","DocumentFragment","makerEl","emap","handle","_parseEvts","hmap","_setEvts","binder","pop","destroy","_unbindData","id","cached","result","querySelector","appendChild","curvw","e","CustomEvent","detail","bubbles","Event","dispatchEvent","unload","values","clear","_teardownEvts","_setFieldValue","_setVal","dataset","type","innerHTML","pos","lastIndexOf","substr","ename","ts","NodeList","from","_trapEvt","hook","rb","addEventListener","onevts","removeEventListener","createElement","df","adoptNode","content","_firstEl","fec","firstElementChild","nodes","childNodes","child","nodeType","Node","ELEMENT_NODE","Page","Router","routeMap","onMove","_routeTree","_parseRoute","_lastRoute","getRoute","absPath","startsWith","pt","_chopEndSlash","endsWith","paths","_parsePath","tree","idMap","route","shift","alert","_any_","redirectPath","_resolve","window","history","replaceState","prototype","unshift","isViewOrStr","src","dest","parts","md","join","HistoryRouter","rootPath","base","pathname","URL","href","basePath","_captureClick","doMove","move","location","onpopstate","state","h","pushState","nxt","activeElement","tagName","origin","preventDefault","go","HashRouter","pathHead","head","curPath","hash","onhashchange","rootViewClass","_rootArea","_curPage","layer","_onMove","_router","mode","loadCb","depart","readyState","_preCtx","back","_replaceContent","_updateTitle","oldPage","baseCtx","context","ttl","title","ListView","itemView","_F_tmpl","pa","_F_itemSet","_createViewByItem","addItemEl","insertItemEl","_childElAt","LFID","getAttribute","_removeItemByEl","listEl","itemEl","newEl","nextEl","insertBefore","removeChild","next","itemViewClass","setAttribute","vws","removeItemEl","childView","removeItemByView","FormView","_assignFromFields","_valueAsType","vw","Date","Number","input","formatLocalDateTime","date","getFullYear","getMonth","slice","getDate","getHours","getMinutes"],"mappings":"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"}